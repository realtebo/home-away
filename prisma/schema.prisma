
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // relazione 1 a n tra un profilo e le sue proprietà (inteso come 'case in affitto')
  properties   Property[]
  // relazione n a 1, il campo id del modello Profile è puntato dal campo ProfileId del modello Favorite
  favorites    Favorite[]

  reviews Review[]
  bookings Booking[]
}

model Property {
  id          String     @id @default(uuid())
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profileId   String
  // relazione n a 1, il campo profileId del modello Property è puntato dal campo clerkId del modello Profile
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  // relazione n a 1, il campo id del modello Property è puntato dal campo PropertyId del modello Favorite
  favorites   Favorite[]

  reviews Review[]
  bookings Booking[]
}

// pivot n-a-n tra profile e property con info aggiuntive (date di creazione e modifica)
model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 1 a n tra favorite e profile
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String
  // 1 a n tra favorite e property
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

}

model Review {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  orderTotal     Int
  totalNights    Int
  checkIn   DateTime
  checkOut  DateTime
  paymentStatus Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}